This file contains instructions for building/packaging on each supported platform.

Step 1 - Update Files
*********************

All Platforms
-------------
Set save_location to "home" in ../save_location.cfg

Update the information in ../version.h

OS X
----
Update CFBundleVersion and CFBundleShortVersionString in *.app/Contents/Info.plist

Android
-------
Update the version information in android/AndroidManifest.xml

Step 2 - Build/Package
**********************

Windows
-------
Open the Code::Blocks project, select the desired build target, and press build

Linux
-----
Open the Code::Blocks project, select the desired build target, and press build

OS X
----
Open the Code::Blocks project, select the desired build target, and press build

Place the binary in *.app/Contents/MacOS/ and rename it to 'game'

Copy the data files into *.app/Contents/Resources/

Save the icon as a .png, use Img2icns to convert it to a .icns, and move that into *.app/Contents/Resources/
Name the icon file icon.icns

Create a disk image from the .app directory using Disk Utility

Android
-------
Choose one of the APP_ABI lines in android/jni/Application.mk and make sure the other one is commented out
'all' builds for all supported architectures (Note that currently 'mips' is disabled)
'armeabi-v7a' builds for ARMv7 (useful for testing)

Choose either release or debug options in android/jni/Application.mk and make sure the other set of options
is commented out

Prepare everything (assets, etc.) by running:
'android/android-prep-windows-x86_64.exe' OR 'android/android-prep-linux-x86_64'

Build the C/C++ source code for the libraries and the game by running:
'android/build-scripts/windows/build.bat' OR 'android/build-scripts/linux/build'

Create the .apk by running:
'android/build-scripts/windows/ant-release-build.bat' OR 'android/build-scripts/linux/ant-release-build'

Clean up by removing all build-related files
(binaries, object files, the stuff created by the prep program, etc.) by running:
'android/clean.bat' OR '../build-scripts/clean-android'
DO NOT forget to run this, as it removes the symlinks that the prep program creates in android/jni/
