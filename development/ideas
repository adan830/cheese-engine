Scroll bar for scrolling buttons and text

Add text colors to buttons, windows, tooltips, and toasts

Write up guidelines for contributors

Write documentation for using the engine, from a non-code standpoint

Move some/all of the ideas and to dos into GitHub issues?

Look into using CMake for my projects
I believe this would entail creating a CMake file that basically
has everything in it that my CodeBlocks project file does currently
Then, it could be used at any time to generate a CodeBlocks project file,
or to instead generate a Makefile
With that working, I could generate and use a Makefile when building on the server,
eliminating the need for CodeBlocks on the server entirely I think, and also
eliminating the need for X11 when building on the server directly

Enable joining a game in progress

Dedicated server mode

IPv6

String data/datafiles
These can be referenced in my other data files in some special way
These can also be referenced in code (this should be really simple to do; look at how colors work?)
Engine needs a language option (this will be a user-configurable option) (defaults to english)
String data entries are now children within a language data entry
When retrieving a string, retrieve the string from the currently set language
With this all setup, this might enable my other idea for making error messages a data file thing
I would also need to extend my stuff to use unicode or whatever instead of just ascii

Change to using dynamic linking instead of static

Maybe all those engine interface functions that return pointers to various objects
should each have an "error" object of the corresponding type that they can return
if they can't find the passed thing
Those objects that are created via scripts could even be hardcoded into the engine, maybe
I could even add a dev option that turns on "crash mode",
and instead of returning error objects, the game just returns null pointers like it does currently

All error messages are located in a script
Would need a new 'error log add' function
that takes an error message name and presents the correct message
Needs to handle an invalid error name
Maybe combine log and error messages into one thing, with a need to specify the type of message

Unit testing for the engine

Other platforms for the Cheese Engine:
BSDs
iOS

Add android mic recording support
Add audio comparison code
Could be used in say bit beast for calling your pet by name

A program that runs in the background (service on android, maybe a regular program on other platforms) that knows where save data is for cheese and bacon games' games
Its purpose would be to detect other instances of the program on other devices
Then it could do street pass like stuff
Of course, this would only be worth it if the devices could detect each other and connect automatically...
A program for all cheese and bacon games, free
Has some kind of currency, earned by simple things like steps taken
Will be cross platform, so I'd prefer to come up with something simple to earn currency on desktop platforms too
Knows where cheese and bacon games are saved on the current platform
What if the user has them elsewhere? Maybe an option to specify the location of various games' save data?
When setting up first time, user creates a profile name
User is assigned randomly generated number. Use some actual real life - based seed, better than just time
These together represent user
User can also set some basic info about them self, and a personal message
Through a connection, the program can detect other instances of itself on other devices
Two instances that see each other do a swap
The program keeps track of what IDs it has swapped with in the past x hours and won't swap with the same ID until the time has passed
Both programs must agree to swap for any data to be exchanged
Both programs agree after swapping of all data is done that it was successful
Only after registering a swap success is any of the swap data actually saved
No record will exist of failed/partial swaps
First, profile data is swapped, including name, message, list of saved games (with swapping permitted), etc.
Keeps a list of all swaps and when they occurred (and if possible maybe even where they occurred?)
Each compatible game has a special save file for this, for swap outgoing
Swapping is enabled on a pergame basis
The swap file contains the permission boolean, along with the game specific data, which is simply swapped out all in one big string
Received swap data for a game is stored in a swap incoming file, inside of a <swap> block
If both programs have a game in common, its data is swapped
